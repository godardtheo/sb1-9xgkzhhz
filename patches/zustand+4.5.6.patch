diff --git a/node_modules/zustand/esm/index.mjs b/node_modules/zustand/esm/index.mjs
index 8b60c00..80623f4 100644
--- a/node_modules/zustand/esm/index.mjs
+++ b/node_modules/zustand/esm/index.mjs
@@ -8,12 +8,12 @@ const { useSyncExternalStoreWithSelector } = useSyncExternalStoreExports;
 let didWarnAboutEqualityFn = false;
 const identity = (arg) => arg;
 function useStore(api, selector = identity, equalityFn) {
-  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && equalityFn && !didWarnAboutEqualityFn) {
-    console.warn(
-      "[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"
-    );
-    didWarnAboutEqualityFn = true;
-  }
+  // if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && equalityFn && !didWarnAboutEqualityFn) {
+  //   console.warn(
+  //     "[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"
+  //   );
+  //   didWarnAboutEqualityFn = true;
+  // }
   const slice = useSyncExternalStoreWithSelector(
     api.subscribe,
     api.getState,
@@ -25,11 +25,11 @@ function useStore(api, selector = identity, equalityFn) {
   return slice;
 }
 const createImpl = (createState) => {
-  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && typeof createState !== "function") {
-    console.warn(
-      "[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."
-    );
-  }
+  // if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && typeof createState !== "function") {
+  //   console.warn(
+  //     "[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."
+  //   );
+  // }
   const api = typeof createState === "function" ? createStore(createState) : createState;
   const useBoundStore = (selector, equalityFn) => useStore(api, selector, equalityFn);
   Object.assign(useBoundStore, api);
@@ -37,11 +37,11 @@ const createImpl = (createState) => {
 };
 const create = (createState) => createState ? createImpl(createState) : createImpl;
 var react = (createState) => {
-  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
-    console.warn(
-      "[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`."
-    );
-  }
+  // if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
+  //   console.warn(
+  //     "[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`."
+  //   );
+  // }
   return create(createState);
 };
 
diff --git a/node_modules/zustand/esm/vanilla.mjs b/node_modules/zustand/esm/vanilla.mjs
index 3427839..72e09e6 100644
--- a/node_modules/zustand/esm/vanilla.mjs
+++ b/node_modules/zustand/esm/vanilla.mjs
@@ -16,11 +16,11 @@ const createStoreImpl = (createState) => {
     return () => listeners.delete(listener);
   };
   const destroy = () => {
-    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
-      console.warn(
-        "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
-      );
-    }
+    // if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
+    //   console.warn(
+    //     "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
+    //   );
+    // }
     listeners.clear();
   };
   const api = { setState, getState, getInitialState, subscribe, destroy };
@@ -29,11 +29,11 @@ const createStoreImpl = (createState) => {
 };
 const createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;
 var vanilla = (createState) => {
-  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
-    console.warn(
-      "[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'."
-    );
-  }
+  // if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
+  //   console.warn(
+  //     "[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'."
+  //   );
+  // }
   return createStore(createState);
 };
 
